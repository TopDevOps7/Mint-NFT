{"version":3,"sources":["assets/file.png","components/mint.js","App.js","index.js"],"names":["Mint","props","React","useState","password","showPassword","values","setValues","count","setCount","setTxResult","txError","setTxError","disablestate","setDisablebutton","useWallet","status","availableInstallTypes","network","wallets","availableConnectTypes","availableConnections","connect","supportFeatures","hasCW20Tokens","addCW20Tokens","connection","install","connectReadonly","connectedWallet","disconnect","useConnectedWallet","contractaddress","tokencount","settokenCount","myCurrentDate","Date","date","getDate","month","getMonth","currentyear","getFullYear","toString","slice","localStorage","setItem","useEffect","initial","a","terra","LCDClient","URL","lcd","chainID","wasm","contractQuery","num_tokens","numtokens","console","log","allcount","getItem","handleClickMint","terra1","execute","MsgExecuteContract","walletAddress","mint","token_id","owner","extension","uri","family_color","color_name","hex_code","uluna","post","fee","Fee","msgs","then","nextTxResult","queryfunction","NotificationManager","error","success","catch","Error","message","String","warning","UserDenied","CreateTxFailed","TxFailed","Timeout","TxUnspecifiedError","Fragment","Container","maxWidth","sx","backgroundColor","borderRadius","justifyContent","padding","textAlign","width","Typography","component","color","display","WalletStatus","WALLET_NOT_CONNECTED","Grid","container","spacing","item","xs","md","map","connectType","Button","onClick","src","alt","style","height","WALLET_CONNECTED","marginTop","InputLabel","fontFamily","fontWeight","fontSize","className","marginLeft","marginRight","background","InputAdornment","position","IconButton","variant","disabled","App","getChainOptions","chainOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21776190.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/file.a531a7b8.png\";","import React, { useRef, useState, useEffect, useMemo } from \"react\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport \"./mint.css\";\r\nimport { Typography } from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Input from \"@mui/material/Input\";\r\nimport FilledInput from \"@mui/material/FilledInput\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport FormHelperText from \"@mui/material/FormHelperText\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\r\nimport DoDisturbOnIcon from \"@mui/icons-material/DoDisturbOn\";\r\n\r\nimport {\r\n  LCDClient,\r\n  MsgSend,\r\n  MnemonicKey,\r\n  MsgStoreCode,\r\n  isTxError,\r\n  MsgInstantiateContract,\r\n  MsgExecuteContract,\r\n  Fee,\r\n  StdFee,\r\n  TxResult,\r\n} from \"@terra-money/terra.js\";\r\n\r\nimport { Grid } from \"@mui/material\";\r\nimport {\r\n  useConnectedWallet,\r\n  useLCDClient,\r\n  createLCDClient,\r\n  useWallet,\r\n  WalletStatus,\r\n} from \"@terra-money/wallet-provider\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport preval from \"preval.macro\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from \"react-notifications\";\r\nconst Mint = (props) => {\r\n  const [values, setValues] = React.useState({\r\n    password: \"\",\r\n\r\n    showPassword: false,\r\n  });\r\n  const [count, setCount] = useState(1);\r\n  var [codeIdinit, SetcodeId] = useState(\"\");\r\n  const [txResult, setTxResult] = useState(null);\r\n  const [txError, setTxError] = useState(null);\r\n  const [signResult, setSignResult] = useState(null);\r\n  const [disablestate, setDisablebutton] = useState(false);\r\n  const {\r\n    status,\r\n    network,\r\n    wallets,\r\n    availableConnectTypes,\r\n    availableInstallTypes,\r\n    availableConnections,\r\n    supportFeatures,\r\n    hasCW20Tokens,\r\n    addCW20Tokens,\r\n    connection,\r\n    connect,\r\n    connectReadonly,\r\n    install,\r\n    disconnect,\r\n  } = useWallet();\r\n  const connectedWallet = useConnectedWallet();\r\n  const contractaddress = \"terra1kgudcvvd2dt3xru7xvds3jw77qp0qxwcdd9uxr\";\r\n  const alltoken_count = 29;\r\n  const [tokencount, settokenCount] = useState(alltoken_count);\r\n  const components = preval`\r\n  const fs = require(\"fs\");\r\n  module.exports = fs.readFileSync(require.resolve('./optimizefile.wasm'), 'base64')\r\n  `;\r\n  let myCurrentDate = new Date();\r\n  let date = myCurrentDate.getDate();\r\n  let month = myCurrentDate.getMonth() + 1;\r\n  let year = myCurrentDate.getFullYear();\r\n  let currentyear = year.toString().slice(2);\r\n  localStorage.setItem(\"alltoken\", alltoken_count);\r\n  const handleClickReduce = () => {\r\n    setValues({\r\n      ...values,\r\n      showPassword: !values.showPassword,\r\n    });\r\n    if (count > 1) {\r\n      setCount(count - 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (connectedWallet) {\r\n      const initial = async () => {\r\n        const terra = new LCDClient({\r\n          URL: connectedWallet.network.lcd,\r\n          chainID: connectedWallet.network.chainID,\r\n        });\r\n        const numtokens = await terra.wasm.contractQuery(\r\n          contractaddress,\r\n          { num_tokens: {} } // query msg\r\n        );\r\n        console.log(numtokens);\r\n        const allcount = localStorage.getItem(\"alltoken\");\r\n        settokenCount(allcount - numtokens.count);\r\n\r\n        if (numtokens.count == allcount) {\r\n          setDisablebutton(false);\r\n          settokenCount(allcount - numtokens.count);\r\n        }\r\n      };\r\n      initial();\r\n    }\r\n  }, [connectedWallet]);\r\n  const handleClickLimitfunction = () => {\r\n    console.log(\"sd\");\r\n  };\r\n\r\n  const handleClickMint = async () => {\r\n    if (connectedWallet) {\r\n      const terra1 = new LCDClient({\r\n        URL: connectedWallet.network.lcd,\r\n        chainID: connectedWallet.network.chainID,\r\n      });\r\n      setDisablebutton(true);\r\n      const execute = new MsgExecuteContract(\r\n        connectedWallet.walletAddress, // sender\r\n        contractaddress, // contract account address\r\n        {\r\n          mint: {\r\n            token_id: \"\",\r\n            owner: \"\",\r\n            extension: {\r\n              uri: \"\",\r\n              family_color: \"\",\r\n              color_name: \"\",\r\n              hex_code: \"\",\r\n            },\r\n          },\r\n        }, // handle msg\r\n        { uluna: 1000 } // coins\r\n      );\r\n      connectedWallet\r\n        .post({\r\n          fee: new Fee(1000000, \"200000uusd\"),\r\n          msgs: [execute],\r\n        })\r\n        .then((nextTxResult) => {\r\n          setTxResult(nextTxResult);\r\n          console.log(nextTxResult);\r\n          const queryfunction = async () => {\r\n            const numtokens = await terra1.wasm.contractQuery(\r\n              contractaddress,\r\n              { num_tokens: {} } // query msg\r\n            );\r\n            console.log(numtokens);\r\n            const allcount = localStorage.getItem(\"alltoken\");\r\n            console.log(allcount);\r\n\r\n            if (numtokens.count == allcount) {\r\n              NotificationManager.error(\"Contract is out of tokens\", \"error\");\r\n              setDisablebutton(false);\r\n              settokenCount(numtokens.count - allcount);\r\n              // localStorage.setItem(\"flag_count\", true);\r\n              // localStorage.setItem(\"alltoken\", numtokens.count - allcount);\r\n            } else {\r\n              if (nextTxResult.success == true) {\r\n                NotificationManager.success(\"Mint is Success\", \"Success\");\r\n                setDisablebutton(false);\r\n                settokenCount(allcount - numtokens.count);\r\n              }\r\n            }\r\n          };\r\n          queryfunction();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          if (error) {\r\n            setTxError(\r\n              \"Unknown Error: \" +\r\n                (error instanceof Error ? error.message : String(error))\r\n            );\r\n            NotificationManager.warning(error.message, \"Warning\", 3000);\r\n            setDisablebutton(false);\r\n          } else {\r\n            if (error instanceof UserDenied) {\r\n              setTxError(\"User Denied\");\r\n              NotificationManager.warning(txError, \"Warning\", 3000);\r\n              setDisablebutton(false);\r\n            }\r\n            if (error instanceof CreateTxFailed) {\r\n              setTxError(\"Create Tx Failed: \" + error.message);\r\n              NotificationManager.warning(txError, \"Warning\", 3000);\r\n              setDisablebutton(false);\r\n            }\r\n            if (error instanceof TxFailed) {\r\n              setTxError(\"Tx Failed: \" + error.message);\r\n              NotificationManager.warning(txError, \"Warning\", 3000);\r\n              setDisablebutton(false);\r\n            }\r\n            if (error instanceof Timeout) {\r\n              setTxError(\"Timeout\");\r\n              NotificationManager.warning(txError, \"Warning\", 3000);\r\n              setDisablebutton(false);\r\n            }\r\n            if (error instanceof TxUnspecifiedError) {\r\n              setTxError(\"Unspecified Error: \" + error.message);\r\n              NotificationManager.warning(txError, \"Warning\", 3000);\r\n              setDisablebutton(false);\r\n            }\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleClickIncrease = () => {\r\n    if (count < 10) {\r\n      setCount(count + 1);\r\n    }\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Container\r\n        maxWidth=\"sm\"\r\n        sx={{\r\n          backgroundColor: \"#06071C\",\r\n          borderRadius: \"20px\",\r\n          justifyContent: \"center\",\r\n          padding: \"50px\",\r\n          textAlign: \"center\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        {/* <ReactNoti position={POSITION.TOP_RIGHT} /> */}\r\n\r\n        <Typography\r\n          component=\"div\"\r\n          sx={{ color: \"#fff\", display: \"flex\", justifyContent: \"center\" }}\r\n        >\r\n          {status === WalletStatus.WALLET_NOT_CONNECTED && (\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={6} md={4}>\r\n                {availableInstallTypes.map((connectType) => (\r\n                  <Button\r\n                    key={\"install-\" + connectType}\r\n                    onClick={() => install(connectType)}\r\n                  >\r\n                    Install {connectType}\r\n                  </Button>\r\n                ))}\r\n              </Grid>\r\n              <Grid item xs={6} md={4}>\r\n                {availableConnections && (\r\n                  <Button\r\n                    key={\"connection-\" + availableConnections[0][\"type\"] + \"\"}\r\n                    onClick={() => connect(availableConnections[0][\"type\"])}\r\n                  >\r\n                    <img\r\n                      src={availableConnections[0][\"icon\"]}\r\n                      alt={availableConnections[0][\"name\"]}\r\n                      style={{ width: \"1em\", height: \"1em\" }}\r\n                    />\r\n                    {availableConnections[0][\"name\"]}\r\n                  </Button>\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={6} md={4}>\r\n                {availableConnections && (\r\n                  <Button\r\n                    key={\"connection-\" + availableConnections[1][\"type\"] + \"\"}\r\n                    onClick={() => connect(availableConnections[1][\"type\"], \"\")}\r\n                  >\r\n                    <img\r\n                      src={availableConnections[1][\"icon\"]}\r\n                      alt={availableConnections[1][\"name\"]}\r\n                      style={{ width: \"1em\", height: \"1em\" }}\r\n                    />\r\n                    {availableConnections[1][\"name\"]}\r\n                  </Button>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {status === WalletStatus.WALLET_CONNECTED && <></>}\r\n        </Typography>\r\n        <Typography component=\"div\" sx={{ marginTop: \"50px\" }}>\r\n          <Typography component=\"p\">\r\n            <InputLabel\r\n              sx={{\r\n                color: \"#FFF\",\r\n                fontFamily: \"Roboto\",\r\n                fontWeight: \"600\",\r\n                fontSize: \"25px\",\r\n              }}\r\n              className=\"minfontspan\"\r\n            >\r\n              Mint your NFT\r\n            </InputLabel>\r\n          </Typography>\r\n          <Typography\r\n            component=\"span\"\r\n            sx={{\r\n              color: \"#FFF\",\r\n              fontSize: \"20px\",\r\n              fontFamily: \"Roboto\",\r\n              fontWeight: \"400\",\r\n            }}\r\n          >\r\n            {tokencount} remaining/0.5 Sol per SolPup\r\n          </Typography>\r\n        </Typography>\r\n        <Typography\r\n          component=\"div\"\r\n          sx={{\r\n            marginTop: \"10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            marginLeft: \"12%\",\r\n            marginRight: \"12%\",\r\n          }}\r\n        >\r\n          <Typography\r\n            sx={{\r\n              display: \"flex\",\r\n              height: \"50px\",\r\n              borderRadius: \"40px\",\r\n              background: \"#fff\",\r\n              width: \"50%\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n            component=\"div\"\r\n          >\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickReduce}\r\n                sx={{ color: \"#F52EF5\" }}\r\n              >\r\n                <DoDisturbOnIcon />\r\n              </IconButton>\r\n            </InputAdornment>\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                sx={{ color: \"#000\", fontWeight: \"600\" }}\r\n              >\r\n                {count}\r\n              </IconButton>\r\n            </InputAdornment>\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickIncrease}\r\n                // onMouseDown={handleMouseDownPassword}\r\n                sx={{ color: \"#F52EF5\" }}\r\n              >\r\n                <AddCircleIcon />\r\n              </IconButton>\r\n            </InputAdornment>\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              display: \"flex\",\r\n              height: \"50px\",\r\n              borderRadius: \"40px\",\r\n              backgroundColor: \"#FE8E0E\",\r\n              width: \"50%\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              marginLeft: \"10px\",\r\n            }}\r\n            component=\"div\"\r\n          >\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickLimitfunction}\r\n                sx={{\r\n                  fontSize: \"15px\",\r\n                  fontFamily: \"monospace\",\r\n                  color: \"brown\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                <p style={{ color: \"#fff\" }}>\r\n                  PRE-SALE:{currentyear}/{month}/{date}\r\n                </p>\r\n              </IconButton>\r\n            </InputAdornment>\r\n          </Typography>\r\n        </Typography>\r\n        <Typography component=\"div\" sx={{ marginTop: \"15px\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleClickMint}\r\n            sx={{\r\n              width: disablestate == false ? \"80%\" : \"80%\",\r\n              height: disablestate == false ? \"50px\" : \"50px\",\r\n              backgroundColor: disablestate == false ? \"#F52EF5\" : \"#F52EF5\",\r\n              borderRadius: disablestate == false ? \"40px\" : \"40px\",\r\n              color: disablestate == true ? \"#5a5a5a !important\" : \"#fff\",\r\n            }}\r\n            disabled={disablestate}\r\n          >\r\n            MINT NOW!!\r\n          </Button>\r\n        </Typography>\r\n        <NotificationContainer />\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n","import \"./App.css\";\n\nimport DropFileInput from \"./components/drop-file-input/DropFileInput\";\nimport Mint from \"./components/mint\";\nfunction App() {\n  const onFileChange = (files) => {\n    console.log(files);\n  };\n\n  return (\n    <div className=\"box\">\n      <Mint />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { getChainOptions, WalletProvider } from \"@terra-money/wallet-provider\";\nimport \"react-notifications/lib/notifications.css\";\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WalletProvider {...chainOptions}>\n        <App />\n      </WalletProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n});\n"],"sourceRoot":""}